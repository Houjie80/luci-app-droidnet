# This is free software, licensed under the Apache License, Version 2.0
#
# Copyright (C) 2024 Hilman Maulana <hilman0.0maulana@gmail.com>
#!/bin/sh

# Environment
COUNT_FAILURE=0
COUNT_SUCCESS=0
DEVICES_FOUND=0
COMMAND_FOUND=0
FAILURE_LIMIT=$(uci get droidnet.monitoring.failure_limit)
SUCCESS_LIMIT=$(uci get droidnet.monitoring.success_limit)
DEVICES_ID=$(uci get droidnet.device.id)
DEVICES_LIST=$(adb devices -l | awk 'NR>1 && /device/ {print $1}')
WAIT_TIME=$(uci get droidnet.monitoring.wait_time)
HOST=$(uci get droidnet.monitoring.host)
PORT=$(uci get droidnet.monitoring.ping)
INTERFACE_NAME=$(uci get droidnet.monitoring.interface)
RESTART_TUNNEL=$(uci get droidnet.monitoring.restart)
TOOL_TUNNELING=$(uci get droidnet.monitoring.tunnel_service)
LOG_FILE=/var/log/droidnet.log
PING_SUCCESS="$(date +"%a, %b %d, %I:%M %p") - Monitoring service: Ping to '$HOST' using '$PORT' succeeded."
PING_FAILURE="$(date +"%a, %b %d, %I:%M %p") - Monitoring service: Ping to '$HOST' using '$PORT' failed."
PING_LIMIT="$(date +"%a, %b %d, %I:%M %p") - Monitoring service: Failed ping to '$HOST' using '$PORT' $FAILURE_LIMIT times."
PING_BACKGROUND="$(date +"%a, %b %d, %I:%M %p") - Monitoring service: Ping to '$HOST' using '$PORT' successfuly, starting continuous ping in the background."

# Functions
check_devices() {
	echo "$(date +"%a, %b %d, %I:%M %p") - Monitoring service: Checking devices." >> $LOG_FILE
	for DEVICE in $DEVICES_LIST; do
		if [ $DEVICE = $DEVICES_ID ]; then
			DEVICES_FOUND=1
			break
		fi
	done
	if [ $DEVICES_FOUND -eq 1 ]; then
		if adb -s $DEVICES_ID shell cmd connectivity 2>&1 | grep -q "No shell command implementation"; then
			echo "$(date +"%a, %b %d, %I:%M %p") - Monitoring service: Device ID '$DEVICES_ID' found, but failed to turn on airplane mode because the device Android version is below 10." >> $LOG_FILE
		else
			COMMAND_FOUND=1
			echo "$(date +"%a, %b %d, %I:%M %p") - Monitoring service: Device ID '$DEVICES_ID' found and airplane mode can be turned on." >> $LOG_FILE
		fi
	else
		echo "$(date +"%a, %b %d, %I:%M %p") - Monitoring service: Device ID '$DEVICES_ID' not found in the list of connected devices." >> $LOG_FILE
	fi
}

enable_airplane_mode() {
	echo "$(date +"%a, %b %d, %I:%M %p") - Monitoring service: Turning on Airplane mode." >> $LOG_FILE
	adb -s $DEVICES_ID shell cmd connectivity airplane-mode enable
}

disable_airplane_mode() {
	echo "$(date +"%a, %b %d, %I:%M %p") - Monitoring service: Turning off Airplane mode." >> $LOG_FILE
	adb -s $DEVICES_ID shell cmd connectivity airplane-mode disable
}

restart_interface() {
	echo "$(date +"%a, %b %d, %I:%M %p") - Monitoring service: Restarting interface '${INTERFACE_NAME}'." >> $LOG_FILE
	ifup $INTERFACE_NAME
}

disable_neko() {
	echo "$(date +"%a, %b %d, %I:%M %p") - Monitoring service: Disabling Neko." >> $LOG_FILE
	/etc/init.d/neko stop
}

enable_neko() {
	echo "$(date +"%a, %b %d, %I:%M %p") - Monitoring service: Enabling Neko." >> $LOG_FILE
	/etc/init.d/neko start
}

disable_openclash() {
	echo "$(date +"%a, %b %d, %I:%M %p") - Monitoring service: Disabling OpenClash." >> $LOG_FILE
	/etc/init.d/openclash stop
}

enable_openclash() {
	echo "$(date +"%a, %b %d, %I:%M %p") - Monitoring service: Enabling OpenClash." >> $LOG_FILE
	/etc/init.d/openclash start
}

disable_passwall() {
	echo "$(date +"%a, %b %d, %I:%M %p") - Monitoring service: Disabling PassWall." >> $LOG_FILE
	/etc/init.d/passwall stop
}

enable_passwall() {
	echo "$(date +"%a, %b %d, %I:%M %p") - Monitoring service: Enabling PassWall." >> $LOG_FILE
	/etc/init.d/passwall start
}

disable_v2ray() {
	echo "$(date +"%a, %b %d, %I:%M %p") - Monitoring service: Disabling V2Ray." >> $LOG_FILE
	start-stop-daemon -K -p /var/run/v2raya.pid
}

enable_v2ray() {
	echo "$(date +"%a, %b %d, %I:%M %p") - Monitoring service: Enabling V2Ray." >> $LOG_FILE
	start-stop-daemon -b -S -m -p /var/run/v2raya.pid -x /usr/bin/enable_v2rayA
}

reconnection() {
	echo "$(date +"%a, %b %d, %I:%M %p") - Monitoring service: Starting connection update service on the device." >> $LOG_FILE
	if [ $RESTART_TUNNEL = 1 ]; then
		echo "$(date +"%a, %b %d, %I:%M %p") - Monitoring service: Disabling tunneling tool." >> $LOG_FILE
		if [ $TOOL_TUNNELING = "neko" ]; then
			disable_neko
		elif [ $TOOL_TUNNELING = "openclash" ]; then
			disable_openclash
		elif [ $TOOL_TUNNELING = "passwall" ]; then
			disable_passwall
		elif [ $TOOL_TUNNELING = "v2ray" ]; then
			disable_v2ray
		else
			echo "$(date +"%a, %b %d, %I:%M %p") - Monitoring service: Tunneling tool '$TOOL_TUNNELING' not found, please install it first." >> $LOG_FILE
		fi
	elif [ $RESTART_TUNNEL = 0 ]; then
		echo "$(date +"%a, %b %d, %I:%M %p") - Monitoring service: Skipping disabling tunneling tool." >> $LOG_FILE
	fi
	enable_airplane_mode
	sleep $WAIT_TIME
	disable_airplane_mode
	sleep $WAIT_TIME
	restart_interface
	if [ $RESTART_TUNNEL = 1 ]; then
		echo "$(date +"%a, %b %d, %I:%M %p") - Monitoring service: Enabling tunneling tool." >> $LOG_FILE
		if [ $TOOL_TUNNELING = "neko" ]; then
			enable_neko
		elif [ $TOOL_TUNNELING = "openclash" ]; then
			enable_openclash
		elif [ $TOOL_TUNNELING = "passwall" ]; then
			enable_passwall
		elif [ $TOOL_TUNNELING = "v2ray" ]; then
			enable_v2ray
		else
			echo "$(date +"%a, %b %d, %I:%M %p") - Monitoring service: Tunneling tool '$TOOL_TUNNELING' not found, please install it first." >> $LOG_FILE
		fi
	elif [ $RESTART_TUNNEL = 0 ]; then
		echo "$(date +"%a, %b %d, %I:%M %p") - Monitoring service: Skipping enabling tunneling tool." >> $LOG_FILE
	fi
	echo "$(date +"%a, %b %d, %I:%M %p") - Monitoring service: Connection update service on the device has completed." >> $LOG_FILE
	COUNT_FAILURE=0
}

ping_else() {
	echo $PING_FAILURE >> $LOG_FILE
	COUNT_FAILURE=$((COUNT_FAILURE + 1))
	if [ $COUNT_FAILURE -ge $FAILURE_LIMIT ]; then
		echo $PING_LIMIT >> $LOG_FILE
		reconnection
	fi
}

ping_http() {
	if curl -Is "http://$HOST:80" > /dev/null; then
		COUNT_SUCCESS=$((COUNT_SUCCESS + 1))
		if [ $SUCCESS_LIMIT = "unlimited" ] || [ $COUNT_SUCCESS -le $SUCCESS_LIMIT ]; then
			echo $PING_SUCCESS >> $LOG_FILE
		fi
		COUNT_FAILURE=0
		if [ $COUNT_SUCCESS -eq $SUCCESS_LIMIT ]; then
			echo $PING_BACKGROUND >> $LOG_FILE
		fi
	else
		ping_else
	fi
}

ping_https() {
	if curl -Is "https://$HOST:443" > /dev/null; then
		COUNT_SUCCESS=$((COUNT_SUCCESS + 1))
		if [ $SUCCESS_LIMIT = "unlimited" ] || [ $COUNT_SUCCESS -le $SUCCESS_LIMIT ]; then
			echo $PING_SUCCESS >> $LOG_FILE
		fi
		COUNT_FAILURE=0
		if [ $COUNT_SUCCESS -eq $SUCCESS_LIMIT ]; then
			echo $PING_BACKGROUND >> $LOG_FILE
		fi
	else
		ping_else
	fi
}

ping_icmp() {
	ping -q -c 3 -W 3 -p 0 $HOST > /dev/null
	if [ $? -eq 0 ]; then
		COUNT_SUCCESS=$((COUNT_SUCCESS + 1))
		if [ $SUCCESS_LIMIT = "unlimited" ] || [ $COUNT_SUCCESS -le $SUCCESS_LIMIT ]; then
			echo $PING_SUCCESS >> $LOG_FILE
		fi
		COUNT_FAILURE=0
		if [ $COUNT_SUCCESS -eq $SUCCESS_LIMIT ]; then
			echo $PING_BACKGROUND >> $LOG_FILE
		fi
	else
		ping_else
	fi
}

ping_tcp() {
	if nc -zvw 1 $HOST 80 2>&1 | grep -q succeeded; then
		COUNT_SUCCESS=$((COUNT_SUCCESS + 1))
		if [ $SUCCESS_LIMIT = "unlimited" ] || [ $COUNT_SUCCESS -le $SUCCESS_LIMIT ]; then
			echo $PING_SUCCESS >> $LOG_FILE
		fi
		COUNT_FAILURE=0
		if [ $COUNT_SUCCESS -eq $SUCCESS_LIMIT ]; then
			echo $PING_BACKGROUND >> $LOG_FILE
		fi
	else
		ping_else
	fi
}

start_service() {
	echo "$(date +"%a, %b %d, %I:%M %p") - Monitoring service: Starting service." >> $LOG_FILE
	check_devices
	if [ $DEVICES_FOUND -eq 1 ] && [ $COMMAND_FOUND -eq 1 ]; then
		echo "$(date +"%a, %b %d, %I:%M %p") - Monitoring service: Starting ping to '$HOST' using '$PORT'." >> $LOG_FILE
		while true; do
			if [ $PORT = "http" ]; then
				ping_http
			elif [ $PORT = "https" ]; then
				ping_https
			elif [ $PORT = "icmp" ]; then
				ping_icmp
			elif [ $PORT = "tcp" ]; then
				ping_tcp
			fi
			sleep 5
		done
	else
		echo "$(date +"%a, %b %d, %I:%M %p") - Monitoring service: Failed to start service." >> $LOG_FILE
		exit 1
	fi
}

stop_service() {
	echo "$(date +"%a, %b %d, %I:%M %p") - Monitoring service: Stopping service." >> $LOG_FILE
	SERVICE_PID=$(pgrep -f /usr/share/droidnet/monitoring)
	kill $SERVICE_PID
}

restart_service() {
	echo "$(date +"%a, %b %d, %I:%M %p") - Monitoring service: Restarting service." >> $LOG_FILE
	SERVICE_PID=$(pgrep -f /usr/share/droidnet/monitoring | head -n 1)
	start_service
}

# Main script
if [ "$1" = "start" ]; then
	start_service
elif [ "$1" = "stop" ]; then
	stop_service
elif [ "$1" = "restart" ]; then
	restart_service
else
	echo "Syntax: Monitoring service [DroidNet]"
	echo "Available commands:"
	echo "	start		Start the service"
	echo "	stop		Stop the service"
	echo "	restart 	Restart the service"
fi

